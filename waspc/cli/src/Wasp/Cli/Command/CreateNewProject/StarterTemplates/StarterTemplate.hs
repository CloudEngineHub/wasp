module Wasp.Cli.Command.CreateNewProject.StarterTemplates.StarterTemplate
  ( StarterTemplate (..),
    DirBasedTemplateMetadata (..),
    TemplateMetadata (..),
    StartingInstructionsBuilder,
    WaspAppAiGenerator (..),
    getTemplateStartingInstructions,
    getTemplateName,
  )
where

import StrongPath (Dir', Path', Rel')
import qualified Wasp.Cli.GithubRepo as GhRepo
import qualified Wasp.Cli.Interactive as Interactive

data StarterTemplate
  = -- | Template from a Github repo.
    GhRepoStarterTemplate !GhRepo.GithubRepoRef !DirBasedTemplateMetadata
  | -- | Template from a disk, that comes bundled with wasp CLI.
    LocalStarterTemplate !DirBasedTemplateMetadata
  | -- | Template that will be dynamically generated by AI based on user's input.
    AiGeneratedStarterTemplate !WaspAppAiGenerator !TemplateMetadata

data DirBasedTemplateMetadata = DirBasedTemplateMetadata
  { _name :: !String,
    _path :: !(Path' Rel' Dir'), -- Path to a directory containing template files.
    _description :: !String,
    _buildStartingInstructions :: !StartingInstructionsBuilder
  }

-- TODO: Have DirBasedTemplateMetadata use TemplateMetadata inside it.
--   Maybe even go step further and use typeclass instead? It should give me name, description, starting instructions.
--   class IsStarterTemplate
data TemplateMetadata = TemplateMetadata
  { _tmplName :: !String,
    _tmplDescription :: !String,
    _tmplBuildStartingInstructions :: !StartingInstructionsBuilder
  }

-- | AI generators that can generate Wasp apps.
data WaspAppAiGenerator = WaspAI

instance Interactive.IsOption StarterTemplate where
  showOption = getTemplateName

  showOptionDescription (GhRepoStarterTemplate _ metadata) = Just $ _description metadata
  showOptionDescription (LocalStarterTemplate metadata) = Just $ _description metadata
  showOptionDescription (AiGeneratedStarterTemplate _ metadata) = Just $ _tmplDescription metadata

-- | Function that returns instructions for running the newly created (from the template) Wasp project.
-- Instructions assume that user is positioned right next to the just created project directory,
-- whose name is provided via projectDirName.
type StartingInstructionsBuilder = ProjectDirName -> StartingInstructions

type ProjectDirName = String

type StartingInstructions = String

getTemplateStartingInstructions :: StarterTemplate -> StartingInstructionsBuilder
getTemplateStartingInstructions = \case
  GhRepoStarterTemplate _ metadata -> _buildStartingInstructions metadata
  LocalStarterTemplate metadata -> _buildStartingInstructions metadata
  AiGeneratedStarterTemplate _ metadata -> _tmplBuildStartingInstructions metadata

getTemplateName :: StarterTemplate -> String
getTemplateName = \case
  GhRepoStarterTemplate _ metadata -> _name metadata
  LocalStarterTemplate metadata -> _name metadata
  AiGeneratedStarterTemplate _ metadata -> _tmplName metadata
